1) We have also added non-blocking feature in our implementation.
2) Currently have assumed that DRAM will be always kept busy hence will not wait for another same row lw/sw instruction and hence
will execute other row lw/sw instruction if there is no lw/sw instruction present waiting in the pipeline for the same row in current use.
3) have used array of queues to save the lw/sw instructions in respective rows and also maintained a doubly linked list to keep a track
of instructions when row buffer changes and they are coordinated accordingly so that no instruction is executed twice.
4) Have assumed that DRAM and processor(non-blocking) will run parallely.
5) Write back to memory will be only done when there was a sw instruction in current row_buffer.
6) "Dram is issued" will be only printed when row_buffer is changed.
8) for lw $r1,<offset>($r2) only r1 will be locked and can neither be changed nor acessed.
9) for sw $r1,<offset>($r2) only r2 will be made busy and cannot be changed but can be acessed.
10) now used labels in jump,bne,beq
11) main and exit are essential
12) zero is immutable.

